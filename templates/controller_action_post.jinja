{% for controller in controllers %}
    {% if controller.http_method == "post" %}
pub async fn handle_{{ controller.operation_id }}(config: &Configuration, {{ arg_name }}: &mut {{ kind_struct }}, kubernetes_api: Api<{{ kind_struct }}>) {
    let dto = convert_kube_type_to_dto({{ arg_name }}.clone());

    match {{ controller.operation_id }}(&config, dto.clone()).await {
        Ok(remote_{{ arg_name }}) => match remote_{{ arg_name }}.{{ resource_remote_ref }} {
            Some({{ resource_remote_ref }}) => {
                add_finalizer({{ arg_name }}, kubernetes_api.clone()).await;
                let condition = create_condition(
                    "Created",
                    "AvailableCreated",
                    "Created the resource",
                    "Resource has been created",
                    {{ arg_name }}.meta().generation,
                )
                .await;
                let mut {{ arg_name }}_clone = {{ arg_name }}.clone();
                if let Some(status) = {{ arg_name }}_clone.status.as_mut() {
                    status.conditions.push(condition);
                    status.uuid = Some(uuid);
                    status.observed_generation = {{ arg_name }}.meta().generation;
                }
                update_status(kubernetes_api.clone(), {{ arg_name }}_clone).await;
            }
            None => {
                warn!("Remote {{ arg_name }} has no {{ resource_remote_ref }}, cannot update status");
            }
        },
        Err(e) => {
            error!("Failed to create a new {{ arg_name }}: {:?}", e);
        }
    }
}
    {% endif %}
{% endfor %}
