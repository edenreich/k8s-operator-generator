{% for controller in controllers %}
    {% if controller.http_method == "put" %}
pub async fn handle_update(
    kubernetes_api: &Api<{{ kind_struct }}>,
    {{ arg_name }}: &mut {{ kind_struct }},
    {{ resource_remote_ref }}: &str,
) -> Result<()> {
    let dto = convert_kube_type_to_dto({{ arg_name }}.clone());
    let config = get_client_config().await?;

    if {{ resource_remote_ref }}.is_empty() {
        return Err(anyhow::anyhow!("{{ resource_remote_ref }} is empty"));
    }

    {{ controller.operation_id }}(&config, {{ resource_remote_ref }}, dto)
        .await
        .context("Failed to {{ controller.action_summary }}")?;

    let {{ arg_name }}_name = {{ arg_name }}.metadata.name.as_deref().unwrap_or_default();
    kubernetes_api
        .replace({{ arg_name }}_name, &PostParams::default(), {{ arg_name }})
        .await
        .context("Failed to {{ controller.action_summary }}")?;

    info!("Updated a {{ arg_name }} by id went successfully");
    Ok(())
}
    {% endif %}
{% endfor %}
