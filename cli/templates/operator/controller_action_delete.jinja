{% for controller in controllers %}
    {% if controller.http_method == "delete" %}
async fn handle_delete(
    kube_client: &Api<{{ kind_struct }}>,
    {{ arg_name }}: &mut {{ kind_struct }},
    {{ resource_remote_ref }}: &str,
)-> Result<(), OperatorError> {
    let config = get_client_config().await?;
    if {{ resource_remote_ref }}.is_empty() {
        warn!("{{ kind_struct }} has no status, cannot delete by id. Skipping...");
        return Ok(());
    }

    {{ controller.operation_id }}(&config, {{ resource_remote_ref }}).await.map_err(|e| {
        error!("Failed to delete {{ arg_name }}: {:?}", e);
        OperatorError::FailedToDeleteResource(e.into())
    })?;

    remove_finalizer({{ arg_name }}, kube_client.clone()).await?;
    info!("Successfully deleted {{ arg_name }}");
    Ok(())
}
    {% endif %}
{% endfor %}
