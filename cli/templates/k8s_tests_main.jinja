/// This file is generated by kopgen. Do not edit manually. If you need to make adjustments add it to .openapi-generator-ignore file.
pub mod utils;

fn main() {}

#[cfg(test)]
mod test {
    // use crate::utils::{client, cluster, operator};
    // use k8s_openapi::apiextensions_apiserver::pkg::apis::apiextensions::v1::CustomResourceDefinition;
    // use k8s_operator::{add_finalizer, types::<Mod>::<Type>};
    // use kube::api::{Api, ObjectMeta};
    // use serial_test::serial;

    // #[tokio::test]
    // #[serial]
    // async fn test_crds_exist() -> anyhow::Result<(), anyhow::Error> {
    //     cluster::setup().await?;
    //     operator::deploy().await?;
    //     let client = client::setup().await;

    //     let crds: Api<CustomResourceDefinition> = Api::all(client.clone());
    //     let params = kube::api::ListParams {
    //         field_selector: Some("metadata.name=<API Group>.example.com".to_string()),
    //         ..Default::default()
    //     };
    //     let crds_list = crds.list(&params).await?;

    //     cluster::teardown().await?;

    //     assert_eq!(
    //         crds_list.items.len(),
    //         1,
    //         "CRDs for <API Group>.example.com not found"
    //     );

    //     anyhow::Ok(())
    // }

    // #[tokio::test]
    // #[serial]
    // async fn test_add_finalizer() -> anyhow::Result<(), anyhow::Error> {
    //     cluster::setup().await?;
    //     operator::deploy().await?;
    //     let client = client::setup().await;
    //     let api: Api<Type> = Api::namespaced(client.clone(), "default");
    //     let mut resource = <Type> {
    //         metadata: ObjectMeta {
    //             name: Some("test-<Type>".to_string()),
    //             ..Default::default()
    //         },
    //         spec: Default::default(),
    //         status: Default::default(),
    //     };

    //     // deploy the resource
    //     match api.get("test-<Type>").await {
    //         std::result::Result::Ok(_) => {}
    //         Err(_) => {
    //             api.create(&Default::default(), &resource).await?;
    //         }
    //     }

    //     // add finalizer
    //     add_finalizer(&mut resource, api.clone()).await?;

    //     // get the resource
    //     let <Type> = api.get("test-<Type>").await?;

    //     // check if the finalizer is added
    //     assert_eq!(
    //         <Type>.metadata.finalizers,
    //         Some(vec!["finalizers.example.com".to_string()])
    //     );

    //     cluster::teardown().await?;

    //     anyhow::Ok(())
    // }
}
