use anyhow::{Context, Error, Result};
use std::sync::Arc;
use kube::api::{
    Api,
    WatchEvent,
    PostParams,
    Resource,
};
use log::{
    error,
    info,
    warn,
};

use openapi::{
    apis::{
        configuration::Configuration,
        {{ tag }}_api::{
        {%- for controller in controllers %}
            {{ controller.operation_id }},
        {%- endfor %}
        },
    },
    models::{{ kind_struct }} as {{ kind_struct }}Dto,
};

use crate::types::{{ arg_name }}::{
    {{ kind_struct }},
    {{ kind_struct }}Spec,
    {{ kind_struct }}Status,
};
use crate::{
    add_event,
    add_finalizer,
    update_status,
    remove_finalizer,
    create_condition,
};

fn convert_kube_type_to_dto({{ arg_name }}: {{ kind_struct }}) -> {{ kind_struct }}Dto {
    let uuid = match {{ arg_name }}.status {
        Some(status) => status.uuid,
        None => None,
    };
    {{ kind_struct }}Dto {
        uuid,
        {%- for field in dto_fields %}
            {{ field.pub_name }}: {{ arg_name }}.spec.{{ field.pub_name }},
        {%- endfor %}
    }
}

fn convert_dto_to_kube_type({{ arg_name }}: {{ kind_struct }}Dto) -> {{ kind_struct }}Spec {
    {{ kind_struct }}Spec {
    {%- for field in dto_fields %}
        {{ field.pub_name }}: {{ arg_name }}.{{ field.pub_name }},
    {%- endfor %}
    }
}

pub async fn handle(
    config: Arc<Configuration>,
    event: WatchEvent<{{ kind_struct }}>,
    kubernetes_api: Api<{{ kind_struct }}>) -> anyhow::Result<()>
{
    match event {
        WatchEvent::Added(mut {{ arg_name }}) => {
            // Add default stauts if it's missing
            if {{ arg_name }}.status.is_none() {
                {{ arg_name }}.status = Some({{ kind_struct }}Status::default());
            };

            {% if has_delete_action %}
            // If the resource was marked for deletion, we need to delete it
            if {{ arg_name }}.metadata.deletion_timestamp.is_some() {
                let condition = create_condition(
                    "Deleting",
                    "ProgressingDeletion",
                    "Deleting the resource",
                    "Resource is being deleted",
                    {{ arg_name }}.meta().generation,
                );
                let mut {{ arg_name }}_clone = {{ arg_name }}.clone();
                if let Some(status) = {{ arg_name }}_clone.status.as_mut() {
                    status.conditions.push(condition);
                    status.observed_generation = {{ arg_name }}.meta().generation;
                }
                update_status(kubernetes_api.clone(), {{ arg_name }}_clone).await?;
                return handle_delete_{{ arg_name }}_by_id(&config, &mut {{ arg_name }}, kubernetes_api).await;
            }
            {% else %}
            warn!("OpenAPI Spec doesn't have a delete operation");
            {% endif %}

            {% if has_create_action %}
            // If the resource has no remote reference, meaning it's a new resource, so we need to create it
            // Otherwise, we need to check for drift
            match {{ arg_name }}.clone().status.unwrap().uuid {
                Some(_) => {
                    return check_for_drift(&config, kubernetes_api.clone(), &mut {{ arg_name }}).await;
                }
                None => {
            {%- for controller in controllers %}
                {%- if controller.http_method == "post" %}
                let condition = create_condition(
                    "Creating",
                    "ProgressingCreating",
                    "Creating the resource",
                    "Resource is being created",
                    {{ arg_name }}.meta().generation,
                );
                let mut {{ arg_name }}_clone = {{ arg_name }}.clone();
                if let Some(status) = {{ arg_name }}_clone.status.as_mut() {
                    status.conditions.push(condition);
                    status.observed_generation = {{ arg_name }}.meta().generation;
                }
                update_status(kubernetes_api.clone(), {{ arg_name }}_clone).await?;
                return handle_{{ controller.operation_id }}(&config, &mut {{ arg_name }}, kubernetes_api).await;
                {%- endif %}
            {%- endfor %}
                }
            }
            {% else %}
            warn!("OpenAPI Spec doesn't have a create operation");
            {% endif %}
        }
        WatchEvent::Modified(mut {{ arg_name }}) => {
        {% if has_update_action %}
                let condition = create_condition(
                    "Updating",
                    "ProgressingUpdating",
                    "Updating the resource",
                    "Resource is being updated",
                    {{ arg_name }}.meta().generation,
                );
                let mut {{ arg_name }}_clone = {{ arg_name }}.clone();
                if let Some(status) = {{ arg_name }}_clone.status.as_mut() {
                    status.conditions.push(condition);
                    status.observed_generation = {{ arg_name }}.meta().generation;
                }
                update_status(kubernetes_api.clone(), {{ arg_name }}_clone).await?;
            {%- for controller in controllers %}
                {%- if controller.http_method == "put" %}
                return handle_{{ controller.operation_id }}(&config, &mut {{ arg_name }}, kubernetes_api).await;
                {%- endif %}
            {%- endfor %}
        {% else %}
            warn!("OpenAPI Spec doesn't have a update operation");
        {% endif %}
        }
        WatchEvent::Bookmark(bookmark) => {
            info!("{{ kind_struct }} Bookmark: {:?}", bookmark.metadata.resource_version);
            return Ok(());
        }
        _ => {
            info!("{{ kind_struct }} {:?}", event);
            return Ok(());
        }
    };
}

pub async fn check_for_drift(
    config: &Configuration,
    kubernetes_api: Api<{{ kind_struct }}>,
    {{ arg_name }}: &mut {{ kind_struct }},
) -> Result<()> {
    let dto = convert_kube_type_to_dto({{ arg_name }}.clone());
    let {{ resource_remote_ref }} = dto.{{ resource_remote_ref }}.clone().unwrap_or_default();

    if dto.{{ resource_remote_ref }}.is_none() {
        warn!("{{ kind_struct }} has no status, cannot get by id or check for drift. Skipping...");
        return Ok(());
    }

    match get_{{ arg_name }}_by_id(&config, &{{ resource_remote_ref }}).await {
        Ok(dto) => {
            let remote_{{ arg_name }} = convert_dto_to_kube_type(dto);
            if remote_{{ arg_name }} != {{ arg_name }}.spec {
                let current_{{ arg_name }}_dto = convert_kube_type_to_dto({{ arg_name }}.clone());
                warn!("{{ kind_struct }} has drifted remotely, sending an update to remote...");
                match update_{{ arg_name }}_by_id(&config, &{{ resource_remote_ref }}, current_{{ arg_name }}_dto).await {
                    Ok(_) => {
                        info!("{{ kind_struct }} updated successfully");
                        let condition = create_condition(
                            "Updated",
                            "AvailableUpdated",
                            "Updated the resource",
                            "Resource has been updated",
                            {{ arg_name }}.meta().generation,
                        );
                        let mut {{ arg_name }}_clone = {{ arg_name }}.clone();
                        if let Some(status) = {{ arg_name }}_clone.status.as_mut() {
                            status.conditions.push(condition);
                            status.observed_generation = {{ arg_name }}.meta().generation;
                        }
                        return update_status(kubernetes_api.clone(), {{ arg_name }}_clone).await;
                    }
                    Err(e) => {
                        error!("Failed to update {{ kind_struct }}: {:?}", e);
                        return Err(anyhow::anyhow!("Failed to update {{ arg_name }}: {:?}", e));
                    }
                }
            }
        }
        Err(e) => {
            error!("Failed to get {{ kind_struct }}: {:?}", e);
            return Err(anyhow::anyhow!("Failed to get {{ arg_name }}: {:?}", e));
        }
    }

    Ok(())
}