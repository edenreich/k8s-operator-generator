use anyhow::{Context, Result};
use futures::StreamExt;
use kube::api::{Api, PostParams, Resource};
use thiserror::Error;

use kube_runtime::{controller::Action, watcher, Controller};
use log::{error, info, warn};
use std::{sync::Arc, time::Duration};

use openapi::{
    apis::{
        {{ tag }}_api::{
            create_{{ arg_name }},
            delete_{{ arg_name }}_by_id,
            get_{{ arg_name }}_by_id,
            update_{{ arg_name }}_by_id
        },
        configuration::Configuration,
    },
    models::{{ kind_struct }} as {{ kind_struct }}Dto,
};

use crate::types::{{ arg_name }}::{
    {{ kind_struct }},
    {{ kind_struct }}Spec,
    {{ kind_struct }}Status,
};
use crate::{
    add_finalizer,
    create_condition,
    remove_finalizer,
    update_status,
};

const REQUEUE_AFTER_IN_SEC: u64 = 30;
const API_URL: &str = "{{ api_url }}";
const API_USER_AGENT: &str = "k8s-operator";

fn convert_kube_type_to_dto({{ arg_name }}: {{ kind_struct }}) -> {{ kind_struct }}Dto {
    let {{ resource_remote_ref }} = match {{ arg_name }}.status {
        Some(status) => status.{{ resource_remote_ref }},
        None => None,
    };
    {{ kind_struct }}Dto {
        {{ resource_remote_ref}},
        {%- for field in dto_fields %}
            {{ field.pub_name }}: {{ arg_name }}.spec.{{ field.pub_name }},
        {%- endfor %}
    }
}

fn convert_dto_to_kube_type({{ arg_name }}: {{ kind_struct }}Dto) -> {{ kind_struct }}Spec {
    {{ kind_struct }}Spec {
    {%- for field in dto_fields %}
        {{ field.pub_name }}: {{ arg_name }}.{{ field.pub_name }},
    {%- endfor %}
    }
}

struct ExtraArgs {
    kube_client: Api<{{ kind_struct }}>,
}

#[derive(Debug, Error)]
enum OperatorError {
    #[error(transparent)]
    AnyhowError(#[from] anyhow::Error),
    // #[error("Failed to process event: {0}")]
    // FailedToProcessEvent(#[source] kube::Error),
    #[error("Failed to delete a {{ arg_name }}: {0}")]
    FailedToDelete{{ kind_struct }}(#[source] anyhow::Error),
    // #[error("Failed to update a {{ arg_name }}: {0}")]
    // FailedToUpdate{{ kind_struct }}(#[source] anyhow::Error),
    // #[error("Failed to create a {{ arg_name }}: {0}")]
    // FailedToCreate{{ kind_struct }}(#[source] anyhow::Error),
    // #[error("Failed to get a {{ arg_name }}: {0}")]
    // FailedToGet{{ kind_struct }}(#[source] anyhow::Error),
    #[error("Failed to update status: {0}")]
    FailedToUpdateStatus(#[source] anyhow::Error),
    // #[error("Failed to remove finalizer: {0}")]
    // FailedToRemoveFinalizer(#[source] anyhow::Error),
    // #[error("Failed to add finalizer: {0}")]
    // FailedToAddFinalizer(#[source] anyhow::Error),
    // #[error("Failed to check for drift: {0}")]
    // FailedToCheckForDrift(#[source] anyhow::Error),
}

pub async fn handle(kube_client: Api<{{ kind_struct }}>) -> Result<()> {
    info!("Starting the controller");
    let controller = Controller::new(kube_client.clone(), watcher::Config::default());

    let extra_args = Arc::new(ExtraArgs {
        kube_client: kube_client.clone(),
    });

    info!("Running the controller");
    controller
        .run(reconcile, error_policy, extra_args)
        .for_each(|res| async {
            match res {
                Ok(action) => info!("Reconciliation was successful, action: {:?}", action),
                Err(e) => error!("Error reconciling: {:?}", e),
            }
        })
        .await;

    info!("{{ kind_struct }} Controller has stopped");
    Ok(())
}

async fn reconcile({{ arg_name }}: Arc<{{ kind_struct }}>, ctx: Arc<ExtraArgs>) -> Result<Action, OperatorError> {
    let kube_client = ctx.kube_client.clone();
    let mut {{ arg_name }} = {{ arg_name }}.as_ref().clone();
    let {{ resource_remote_ref }} = match {{ arg_name }}.clone().status {
        Some(status) => status.{{ resource_remote_ref }}.unwrap_or_default(),
        None => "".to_string(),
    };

    // Add default stauts if it's missing
    if {{ arg_name }}.status.is_none() {
        add_default_status(&kube_client, &mut {{ arg_name }}).await?;
    }

    {% if has_delete_action %}
    // If the resource was marked for deletion, we need to delete it
    if {{ arg_name }}.meta().deletion_timestamp.is_some() {
        handle_delete(&kube_client, &mut {{ arg_name }}, &{{ resource_remote_ref }}).await?;
    }
    {% else %}
    warn!("OpenAPI Spec doesn't have a delete operation implemented for {{ tag }} tag.");
    {% endif %}

    // If {{ resource_remote_ref }} is empty, we need to create a new resource
    if {{ resource_remote_ref }}.is_empty() {
            let condition = create_condition(
                "Creating",
                "ProgressingCreating",
                "Creating the resource",
                "Resource is being created",
                {{ arg_name }}.meta().generation,
            );
            if let Some(status) = {{ arg_name }}.clone().status.as_mut() {
                status.conditions.push(condition);
                status.observed_generation = {{ arg_name }}.meta().generation;
            }
            update_status(&kube_client, {{ arg_name }}.clone()).await?;
            {% if has_create_action %}
            handle_create(&kube_client, &mut {{ arg_name }}.clone()).await?;
            {% else %}
            warn!("OpenAPI Spec doesn't have a create operation implemented for {{ tag }} tag.");
            {% endif %}
    } else {
        {% if has_update_action %}
        // If the resource was updated in kubernetes, we need to update the remote resource
        if {{ arg_name }}.meta().generation != {{ arg_name }}.status.as_ref().unwrap().observed_generation {
            handle_update(&kube_client, &mut {{ arg_name }}, &{{ resource_remote_ref }}).await?;
        }
        {% else %}
        warn!("OpenAPI Spec doesn't have an update operation implemented for {{ tag }} tag.");
        {% endif %}
    }

    check_for_drift(&kube_client, &mut {{ arg_name }}).await?;

    Ok(Action::requeue(Duration::from_secs(REQUEUE_AFTER_IN_SEC)))
}

async fn get_client_config() -> Result<Configuration> {
    let config = Configuration {
        base_path: API_URL.to_string(),
        client: reqwest::Client::new(),
        user_agent: Some(API_USER_AGENT.to_string()),
        bearer_access_token: Some(std::env::var("ACCESS_TOKEN").unwrap_or_default()),
        ..Default::default()
    };
    Ok(config)
}

async fn add_default_status(
    kube_client: &Api<{{ kind_struct }}>,
    {{ arg_name }}: &mut {{ kind_struct }},
) -> Result<(), OperatorError> {
    let status = {{ kind_struct }}Status {
        conditions: vec![],
        {{ resource_remote_ref }}: None,
        observed_generation: Some(0),
    };
    {{ arg_name }}.status = Some(status);
    update_status(kube_client, {{ arg_name }}.clone()).await.map_err(OperatorError::FailedToUpdateStatus)
}

pub async fn check_for_drift(
    kube_client: &Api<{{ kind_struct }}>,
    {{ arg_name }}: &mut {{ kind_struct }},
) -> Result<()> {
    let dto = convert_kube_type_to_dto({{ arg_name }}.clone());
    let {{ resource_remote_ref }} = dto.{{ resource_remote_ref }}.clone().unwrap_or_default();
    let config = get_client_config().await?;

    if dto.{{ resource_remote_ref }}.is_none() {
        warn!("{{ kind_struct }} has no status, cannot get by id or check for drift. Skipping...");
        return Ok(());
    }

    match get_{{ arg_name }}_by_id(&config, &{{ resource_remote_ref }}).await {
        Ok(dto) => {
            let remote_{{ arg_name }} = convert_dto_to_kube_type(dto);
            if remote_{{ arg_name }} != {{ arg_name }}.spec {
                let current_{{ arg_name }}_dto = convert_kube_type_to_dto({{ arg_name }}.clone());
                warn!("{{ kind_struct }} has drifted remotely, sending an update to remote...");
                match update_{{ arg_name }}_by_id(&config, &{{ resource_remote_ref }}, current_{{ arg_name }}_dto).await {
                    Ok(_) => {
                        info!("{{ kind_struct }} updated successfully");
                        let condition = create_condition(
                            "Updated",
                            "AvailableUpdated",
                            "Updated the resource",
                            "Resource has been updated",
                            {{ arg_name }}.meta().generation,
                        );
                        let mut {{ arg_name }}_clone = {{ arg_name }}.clone();
                        if let Some(status) = {{ arg_name }}_clone.status.as_mut() {
                            status.conditions.push(condition);
                            status.observed_generation = {{ arg_name }}.meta().generation;
                        }
                        update_status(kube_client, {{ arg_name }}_clone).await?
                    }
                    Err(e) => {
                        error!("Failed to update {{ kind_struct }}: {:?}", e);
                        return Err(anyhow::anyhow!("Failed to update {{ arg_name }}: {:?}", e));
                    }
                }
            }
        }
        Err(e) => {
            error!("Failed to get {{ kind_struct }}: {:?}", e);
            return Err(anyhow::anyhow!("Failed to get {{ arg_name }}: {:?}", e));
        }
    }

    Ok(())
}

fn error_policy(_resource: Arc<{{ kind_struct }}>, error: &OperatorError, _ctx: Arc<ExtraArgs>) -> Action {
    error!("Error processing event: {:?}", error);
    Action::requeue(Duration::from_secs(REQUEUE_AFTER_IN_SEC))
}
