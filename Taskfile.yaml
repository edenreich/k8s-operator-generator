version: '3'

dotenv: ['.env']

tasks:
  docs:
    desc: Open the documentation
    cmds:
      - mdbook serve --open docs --hostname 0.0.0.0

  generate-project:
    desc: Generate a new project
    cmds:
      - task: clean
      - task: install
      - mkdir temp && cd temp && kopgen init . && cp .env.example .env && task generate

  lint:
    desc: Lint the code
    cmds:
      - cargo fmt --all -- --check

  lint-generated-project:
    desc: Lint the generated project code
    deps:
      - generate-project
    cmds:
      - cd temp && task lint

  audit:
    desc: Check dependencies
    cmds:
      - cargo audit

  analyse:
    desc: Analyse the code
    cmds:
      - cargo clippy --all-targets --all-features -- -D warnings

  analyse-generated-project:
    desc: Analyse the generated project code
    deps:
      - generate-project
    cmds:
      - cd temp && task analyse

  setup-target:
    desc: Conditionally add a Rust target based on TARGET_ARCH
    cmds:
      - |
        if [ -n "${TARGET_ARCH}" ]; then
          echo "Adding target architecture: ${TARGET_ARCH}";
          rustup target add ${TARGET_ARCH};
        else
          echo "TARGET_ARCH is not set. Skipping target addition.";
          echo "Using default target $(rustup show active-toolchain).";
        fi
    silent: true

  build:
    desc: Build kopgen CLI
    deps:
      - setup-target
    cmds:
      - cargo build {{if eq .RELEASE "true"}}--release {{end}}{{if .TARGET_ARCH}}--target {{.TARGET_ARCH}}{{end}}

  install:
    desc: Install the CLI
    deps:
      - build
    cmds:
      - cargo install --path ./cli --force

  run:
    desc: Run the CLI
    deps:
      - setup-target
    cmds:
      - cargo run {{if .TARGET_ARCH}}--target {{.TARGET_ARCH}} {{end}}--package kopgen -- {{.CLI_ARGS}}

  test:
    desc: Test the project
    cmds:
      - cargo test --test unit
      - cargo test --test snapshot

  test-review-snapshots:
    desc: Test the project with snapshot review
    cmds:
      - cargo insta review

  pre-release:
    desc: Pre-release the project
    cmds:
      - semantic-release --tag-format 'v${version}-rc' --prerelease rc {{.CLI_ARGS}}
    env:
      CI: true
      TARGET_ARCH: aarch64-unknown-linux-musl

  release:
    desc: Release the project
    cmds:
      - semantic-release {{.CLI_ARGS}}
    env:
      CI: true
      TARGET_ARCH: aarch64-unknown-linux-musl

  clean:
    desc: Clean the project
    cmds:
      - rm -rf temp
      - cargo clean
