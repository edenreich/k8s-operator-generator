version: '3'

tasks:
  oas-download:
    desc: Download OpenAPI specification
    cmds:
      - curl -o openapi.yaml https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/openapi.yaml

  oas-generate-rust-client:
    desc: Generate the OpenAPI Rust client
    cmds:
      - docker run --rm -v ${PWD}:/local openapitools/openapi-generator-cli:v7.4.0 generate -i /local/openapi.yaml -g rust -o /local/client

  build:
    desc: Build the k8s operator
    cmds:
      - cargo build --bins

  generate-types:
    desc: Generate the Rust types and controllers from the OpenAPI specification
    cmds:
      - cargo build

  generate-crds:
    desc: Generate the k8s CRD's out of the rust structs
    cmds:
      - cargo run --bin generate-crds > manifests/crds/all.yaml

  generate:
    desc: Generate the k8s CRD's out of the rust structs
    deps:
      - generate-types
      - oas-generate-rust-client
      - generate-crds

  run:
    desc: Run the k8s operator
    cmds:
      - RUST_LOG=info cargo run --bin operator

  run-fake-server:
    desc: Run the JSON server
    cmds:
      - docker run --rm -it -p 8080:80 -v ${PWD}/fake-server:/data -w /data --entrypoint="" clue/json-server bash -c "npm install"
      - docker run --rm -it -p 8080:80 -v ${PWD}/fake-server:/data -w /data clue/json-server --watch db.js --id 'uuid'

  package:
    desc: Package the k8s operator
    cmds:
      - docker build -t operator:latest .

  cluster-create:
    desc: Create a k8s cluster
    cmds:
      - ctlptl apply -f Cluster.yaml

  cluster-delete:
    desc: Delete a k8s cluster
    cmds:
      - ctlptl delete -f Cluster.yaml

  deploy-crds:
    desc: Deploy the k8s CRD's
    cmds:
      - kubectl config use-context k3d-k3s-default
      - kubectl apply -f manifests/crds/all.yaml

  dirty-check:
    desc: Check if the project is dirty
    cmds:
      - task generate
      - git diff --quiet || (echo "Project is dirty" && exit 1)

  clean:
    desc: Clean the project
    cmds:
      - cargo clean
      - task cluster-delete
