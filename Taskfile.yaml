version: '3'

tasks:
  oas-download:
    desc: Download OpenAPI specification
    cmds:
      - curl -o openapi.yaml https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/openapi.yaml

  oas-generate-rust-client:
    desc: Generate the OpenAPI Rust client
    cmds:
      - |
        docker run --rm \
          -w /local \
          -v ${PWD}/crates/client-sdk:/local/client-sdk \
          -v ${PWD}/openapi.yaml:/tmp/openapi.yaml \
          openapitools/openapi-generator-cli:v7.4.0 \
          generate -i /tmp/openapi.yaml -g rust -o client-sdk
      - rm crates/client-sdk/{.travis.yml,git_push.sh}

  oas-generate-docs:
    desc: Generate the OpenAPI documentation
    cmds:
      - |
        docker run --rm -v ${PWD}:/local \
          openapitools/openapi-generator-cli:v7.4.0 \
          generate -i /local/openapi.yaml -g markdown -o /local/docs

  build:
    desc: Build everything
    cmds:
      - cargo build

  generate-code:
    desc: Generate the Rust types and controllers from the OpenAPI specification
    cmds:
      - cargo run --package k8s_codegen

  generate-crds:
    desc: Generate the k8s CRD's out of the rust structs
    cmds:
      - cargo run --package k8s_crdgen > manifests/crds/all.yaml

  generate:
    desc: Generate the k8s CRD's out of the rust structs
    deps:
      - generate-code
      - oas-generate-rust-client
      - oas-generate-docs
      - generate-crds

  run:
    desc: Run the k8s operator
    cmds:
      - RUST_LOG=info INSTALL_CRDS=true cargo run --package k8s_operator

  run-fake-server:
    desc: Run the fake server
    cmds:
      - docker run --rm -it -p 8080:4010 -v ${PWD}/openapi.yaml:/tmp/openapi.yaml stoplight/prism:latest mock -h 0.0.0.0 /tmp/openapi.yaml

  package:
    desc: Package the k8s operator
    cmds:
      - docker build -t localhost:5005/operator:latest .
      - docker push localhost:5005/operator:latest

  deploy-operator:
    desc: Deploy the k8s operator
    cmds:
      - kubectl config use-context k3d-k3s-default
      - kubectl apply -f manifests/rbac/
      - kubectl apply -f manifests/operator/deployment.yaml

  test:
    desc: Run the tests
    cmds:
      - cargo test --package k8s_operator_e2e -- --test-threads=1

  cluster-create:
    desc: Create a k8s cluster
    cmds:
      - ctlptl apply -f Cluster.yaml

  cluster-delete:
    desc: Delete a k8s cluster
    cmds:
      - ctlptl delete -f Cluster.yaml

  deploy-crds:
    desc: Deploy the k8s CRD's
    cmds:
      - kubectl config use-context k3d-k3s-default
      - kubectl apply -f manifests/crds/all.yaml

  dirty-check:
    desc: Check if the project is dirty
    cmds:
      - task generate
      - git diff --quiet || (echo "Project is dirty" && exit 1)

  clean:
    desc: Clean the project
    cmds:
      - cargo clean
      - task cluster-delete
